<script src="{{ 'confirm-dialog.js' | asset_url }}" defer></script>

<script>

  const addLocalePath = (path) => {
    const locale = window.Shopify.locale;
    const prefix = locale === 'en' ? '' : `/${locale}`;
    return `${prefix}${path}`;
  }

  class CartSelector {
    constructor() {
      this.initialized = false;
      this.cartItems = document.querySelector('cart-items');
      this.init();
      this.initObserver();
    }

    initObserver() {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          const jsContentsDom = this.cartItems?.querySelector('.js-contents');
          if (mutation.target === jsContentsDom) {
            this.init();
          }
        });
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    }

    init() {
      if(!this.cartItems) return;
      if (this.cartItems && this.cartItems.classList.contains('is-empty')) {
        this.removeSelectorHTML();
        return;
      }

      this.createSelectorHTML();
    }

    removeSelectorHTML() {
      document.querySelectorAll('.cart-selector-wrapper').forEach(el => el.remove());
      document.querySelectorAll('.cart-item-checkbox-wrapper').forEach(el => el.remove());
      document.querySelectorAll('.caption-with-letter-spacing .cart-selector-select-all').forEach(el => el.remove());
    }

    createSelectorHTML() {
      this.removeSelectorHTML();

      {%  liquid
        assign enabled_button_number = 1
        if block.settings.show_add_to_list
          assign enabled_button_number = enabled_button_number | plus: 1
        endif
        if block.settings.show_request_for_quote
          assign enabled_button_number = enabled_button_number | plus: 1
        endif
        if block.settings.show_clear_cart
          assign enabled_button_number = enabled_button_number | plus: 1
        endif
      %}


      const selectorHTML = `
        <div class="cart-selector-wrapper" data-cart-selector>
          <div class="cart-selector-controls">
         
            <div class="cart-selector-actions {% if enabled_button_number > 0 %}cart-selector-actions-button-number-{{ enabled_button_number }}{% endif %}">
              {% if block.settings.show_add_to_list %}
                <div class="cart-add-to-list-btn-template" ></div>
              {% endif %}

              {% if block.settings.show_request_for_quote %}
                <button class="cart-request-for-quote-btn" data-request-for-quote disabled>
                  {{ block.settings.request_for_quote_text | default: 'Request a Quote' }}
                </button>
              {% endif %}

              <button
                class="cart-delete-selected-btn"
                data-delete-selected
                disabled
              >
                {{ block.settings.delete_selected_text | default: 'Delete Selected' }}
              </button>

              {% if block.settings.show_clear_cart %}
              <button
                class="cart-clear-cart-btn"
                data-clear-cart
              >
                {{ block.settings.clear_cart_text | default: 'Clear Cart' }}
              </button>
              {% endif %}
            </div>
          </div>
        </div>
      `;
      
      const cartForm = document.querySelector('form#cart');
      if (cartForm) {
        cartForm.insertAdjacentHTML('beforebegin', selectorHTML);
      }

      const tableHeaders = this.cartItems.querySelectorAll('.cart-items thead tr');
      tableHeaders.forEach((header) => {
        const selectAllTh = document.createElement('th');
        selectAllTh.className = 'caption-with-letter-spacing';
        selectAllTh.innerHTML = `
          <label class="cart-selector-select-all">
            <div 
              class="cart-selector-checkbox" 
              role="checkbox" 
              aria-checked="false"
              tabindex="0"
              data-cart-select-all
            ></div>
            <span class="visually-hidden">{{ block.settings.select_all_text | default: 'Select All' }}</span>
          </label>
        `;
        header.insertBefore(selectAllTh, header.firstChild);
      });

      this.wrappers = document.querySelectorAll('[data-cart-selector]');
      this.selectAllCheckboxes = document.querySelectorAll('[data-cart-select-all]');
      this.requestForQuoteBtns = document.querySelectorAll('[data-request-for-quote]');
      this.deleteSelectedBtns = document.querySelectorAll('[data-delete-selected]');
      this.clearCartBtns = document.querySelectorAll('[data-clear-cart]');

      this.addCheckboxesToItems();

      this.bindEvents();
    }

    addCheckboxesToItems() {
      const items = this.cartItems.querySelectorAll('.cart-item');
      items.forEach((item) => {
        const checkbox = document.createElement('td');
        checkbox.className = 'cart-item-checkbox-wrapper';

        const productLink = item.querySelector('.cart-item__name')?.getAttribute('href');
        const variantId = item.querySelector('[data-quantity-variant-id]')?.dataset.quantityVariantId;
        const quantity = item.querySelector('[data-quantity-variant-id]')?.value
        const sku = item.querySelector('[data-sku]')?.textContent;

        checkbox.innerHTML = `
          <div 
            class="cart-selector-checkbox" 
            role="checkbox" 
            aria-checked="false"
            tabindex="0"
            data-item-cart-checkbox
            data-variant-id="${variantId}"
            data-product-url="${productLink}"
            data-quantity="${quantity}"
            data-sku="${sku}"
          ></div>
        `;
        item.insertBefore(checkbox, item.firstChild);
      });

      this.itemCheckboxes = document.querySelectorAll('[data-item-cart-checkbox]');
    }

    bindEvents() {
      this.selectAllCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener('click', () => {
          const isChecked = checkbox.getAttribute('aria-checked') === 'true';
          const newState = !isChecked;

          this.selectAllCheckboxes.forEach((cb) => {
            cb.setAttribute('aria-checked', newState);
          });

          this.itemCheckboxes.forEach((cb) => {
            cb.setAttribute('aria-checked', newState);
          });

          this.updateDeleteButtonState();
        });
      });

      this.itemCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener('click', () => {
          const isChecked = checkbox.getAttribute('aria-checked') === 'true';
          const newState = !isChecked;
          const variantId = checkbox.dataset.variantId;
          const productUrl = checkbox.dataset.productUrl;

          this.itemCheckboxes.forEach((cb) => {
            if (cb.dataset.variantId === variantId && cb.dataset.productUrl === productUrl) {
              cb.setAttribute('aria-checked', newState);
            }
          });

          this.updateSelectAllState();
          this.updateDeleteButtonState();
        });
      });

      this.deleteSelectedBtns.forEach((btn) => {
        btn.addEventListener('click', () => this.deleteSelectedItems());
      });

      this.clearCartBtns.forEach((btn) => {
        btn.addEventListener('click', () => this.clearCart());
      });

      this.requestForQuoteBtns.forEach((btn) => {
        btn.addEventListener('click', () => this.requestForQuote());
      });
    }

    requestForQuote() {
      const selectedVariantIds = [...this.itemCheckboxes]
        .filter((cb) => cb.getAttribute('aria-checked') === 'true')
        .map((cb) => ({
          sku: cb.dataset.sku,
          quantity: Number(cb.dataset.quantity),
        }));
      const params = {
        quoteItems: selectedVariantIds,
      }
      sessionStorage.setItem('resubmit-quote-items', JSON.stringify(params));
      window.location.href = addLocalePath('/apps/customer-account/request-for-quote');

    }

    updateSelectAllState() {
      const checkedCount = [...this.itemCheckboxes].filter((cb) => cb.getAttribute('aria-checked') === 'true').length;
      const allChecked = checkedCount === this.itemCheckboxes.length;

      this.selectAllCheckboxes.forEach((checkbox) => {
        checkbox.setAttribute('aria-checked', allChecked);
      });
    }

    updateDeleteButtonState() {
      const hasChecked = [...this.itemCheckboxes].some((cb) => cb.getAttribute('aria-checked') === 'true');

      this.deleteSelectedBtns.forEach((btn) => {
        btn.disabled = !hasChecked;
      });
      this.requestForQuoteBtns.forEach((btn) => {
        btn.disabled = !hasChecked;
      });
      
      const templates = document.querySelectorAll('.cart-add-to-list-btn-template');
      templates.forEach((template) => {
        const addToListBtn = template.querySelector('button');
        if (addToListBtn) {
          addToListBtn.disabled = !hasChecked;
        }
      });
    }

    async deleteSelectedItems() {
      createConfirmDialog({
        title: {{ block.settings.delete_selected_confirm_title | default: 'Delete Selected Items' | json }},
        description: {{ block.settings.delete_selected_confirm_description | default: 'Are you sure you want to delete selected items?' | json }},
        confirmText: {{ block.settings.delete_selected_confirm_button | default: 'Confirm' | json }},
        cancelText: {{ block.settings.delete_selected_cancel_button | default: 'Cancel' | json }},
      }).then(async (result) => {
        if (result) {
          const selectedVariantIds = [...this.itemCheckboxes]
            .filter((cb) => cb.getAttribute('aria-checked') === 'true')
            .map((cb) => cb.dataset.variantId);

          try {
            const updates = {};
            selectedVariantIds.forEach((id) => {
              updates[id] = 0;
            });

            const response = await fetch('/cart/update.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ updates }),
            });

            if (response.ok) {
              setTimeout(() => {
                window.location.reload(true);
              }, 0);
            }
          } catch (error) {
            console.error('Error deleting items:', error);
          }
        }
      });
    }

    async clearCart() {
      createConfirmDialog({
        title: {{ block.settings.clear_cart_confirm_title | default: 'Clear Cart' | json }},
        description: {{ block.settings.clear_cart_confirm_description | default: 'Are you sure you want to clear the cart?' | json }},
        confirmText: {{ block.settings.clear_cart_confirm_button | default: 'Confirm' | json }},
        cancelText: {{ block.settings.clear_cart_cancel_button | default: 'Cancel' | json }},
      }).then(async (result) => {
        if (result) {
          try {
            const response = await fetch('/cart/clear.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
            });

            if (response.ok) {
              window.location.reload(true);
            }
          } catch (error) {
            console.error('Error clearing cart:', error);
          }
        }
      });
    }
  }

  let cartSelector;
  window.addEventListener('DOMContentLoaded', () => {
    cartSelector = new CartSelector();
  });
</script>

{% schema %}
{
  "name": "Cart Item Selector",
  "target": "head",
  "settings": [
    {
      "type": "text",
      "id": "select_all_text",
      "label": "Select All Text",
      "default": "Select All"
    },
    {
      "type": "text",
      "id": "delete_selected_text",
      "label": "Delete Selected Text",
      "default": "Delete Selected"
    },
    {
      "type": "checkbox",
      "id": "show_clear_cart",
      "label": "Show Clear Cart Button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_add_to_list",
      "label": "Show Add to List Button - (requires enable Add to List app)",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_request_for_quote",
      "label": "Show Request for Quote Button",
      "default": true
    },
    {
      "type": "text",
      "id": "clear_cart_text",
      "label": "Clear Cart Text",
      "default": "Clear Cart"
    },
    {
      "type": "text",
      "id": "clear_cart_confirm_title",
      "label": "Clear Cart Confirm Title",
      "default": "Clear Cart"
    },
    {
      "type": "text",
      "id": "clear_cart_confirm_description",
      "label": "Clear Cart Confirm Description",
      "default": "Are you sure you want to clear the cart?"
    },
    {
      "type": "text",
      "id": "clear_cart_confirm_button",
      "label": "Clear Cart Confirm Button Text",
      "default": "Confirm"
    },
    {
      "type": "text",
      "id": "clear_cart_cancel_button",
      "label": "Clear Cart Cancel Button Text",
      "default": "Cancel"
    },
    {
      "type": "text",
      "id": "request_for_quote_text",
      "label": "Request for Quote Text",
      "default": "Request for Quote"
    },
    {
      "type": "text",
      "id": "delete_selected_confirm_title",
      "label": "Delete Selected Confirm Title",
      "default": "Delete Selected Items"
    },
    {
      "type": "text",
      "id": "delete_selected_confirm_description",
      "label": "Delete Selected Confirm Description",
      "default": "Are you sure you want to delete selected items?"
    },
    {
      "type": "text",
      "id": "delete_selected_confirm_button",
      "label": "Delete Selected Confirm Button Text",
      "default": "Confirm"
    },
    {
      "type": "text",
      "id": "delete_selected_cancel_button",
      "label": "Delete Selected Cancel Button Text",
      "default": "Cancel"
    }
  ]
}
{% endschema %}
